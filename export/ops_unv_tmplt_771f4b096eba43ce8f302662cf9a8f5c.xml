<?xml version="1.0" encoding="UTF-8"?><unload unload_date="2018-09-10 08:08:54" unload_format="1" unload_table="ops_unv_tmplt" unload_version="6.4.7.0"><ops_unv_tmplt action="INSERT_OR_UPDATE"><credentials_var/><broadcast_cluster/><agent/><use_common_script>false</use_common_script><credentials/><icon_filesize>1558</icon_filesize><icon>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</icon><icon_date_created>2018-09-07 04:44:12</icon_date_created><description/><sys_updated_on>2018-09-10 07:23:33</sys_updated_on><agent_var/><icon_filename>FAVICON48x48px.png</icon_filename><sys_id>771f4b096eba43ce8f302662cf9a8f5c</sys_id><output_return_text/><sys_updated_by>ops.admin</sys_updated_by><variable_prefix>adduser</variable_prefix><sys_created_on>2018-09-07 04:44:12</sys_created_on><script_windows>#!/usr/bin/python
##!/opt/universal/python3.6/bin/python3
# --
#         Origins: Stonebranch
#          Author: Colin Cocksedge colin.cocksedge@stonebranch.com
#            Date: 27-AUG-2018
#
#    Copyright (c) Stonebranch, 2018.  All rights reserved.
#
#         Purpose: Add or Delete a UC User to or from a UC Group
#
#           Version History:    1.0     CCO     27-AUG-2018      Created Script 
#                               1.1     nbu     29-AUG-2018      correction ops_uccg_action changes to ops_adduser_action  
#                               2.0     nbu     07-Spt-2018      mass update added
# --
version = "2.0"

import logging
import requests
import sys
import csv
import time
import datetime

# -- logging settings DEBUG, INFO, WARNING, ERROR, CRITICAL

logging.basicConfig(level=logging.${ops_adduser_loglevel}, format=' %(asctime)s - %(levelname)s - %(message)s')

# -- Main Logic Function
def main():
    ScriptSetup()                                               # -- Import Required Modules, Setup Logging Format, Set Variables
    group_maintenance()
    
# --

# -- Import Required Modules, Setup Logging Format, Set Variables 
def ScriptSetup():
    logging.info("Executing version " + version + " with the following paramaters")   
    logging.info('Controller URL: ${ops_adduser_controllerurl}')
    logging.info('Script: ${ops_adduser_script}')
    logging.info("username: ${_credentialUser('${ops_adduser_credential}')}")
    logging.info("password: ${_credentialPwd('${ops_adduser_credential}')}")

# -- Functions Go Here

# -- Read Group Definition
def ReadGroup(group):
    logging.debug("Reading Group Definition")
    ReadGroup_apiurl = "${ops_adduser_controllerurl}/resources/usergroup?groupname=" + str(group)
    ReadGroup_apiHeaders = {
        'content-type': 'application/json',
        'Accept': 'application/json'
    }
    # -- Call RestAPI
    global ReadGroup_response
    logging.debug("Calling Universal Controller Groups API (READ Group)")
    ReadGroup_response = requests.get(ReadGroup_apiurl, headers=ReadGroup_apiHeaders, auth=("${_credentialUser('${ops_adduser_credential}')}", "${_credentialPwd('${ops_adduser_credential}')}")) 
    if(ReadGroup_response.ok):
        logging.debug("Universal Controller Groups API (READ Group) Exit Code {0}".format(ReadGroup_response))
        logging.debug("{0}".format(ReadGroup_response.text))
    else:
        logging.critical("Universal Controller Groups API (READ Group) Exit Code {0}".format(ReadGroup_response))
        logging.critical("{0}".format(ReadGroup_response.text))
        quit(1)
# --
# -- Add User to Group
def AddUser(user):
    logging.debug("Adding User to Group")
    AddUser_json=ReadGroup_response.json()
    AddUser_json['groupMembers'].append({'user':user})
    AddUser_apiurl = "${ops_adduser_controllerurl}/resources/usergroup" 
    AddUser_apiHeaders = {
        'content-type': 'application/json',
        'Accept': 'application/json'
    }
    AddUser_response = requests.put(AddUser_apiurl, headers=AddUser_apiHeaders, auth=("${_credentialUser('${ops_adduser_credential}')}", "${_credentialPwd('${ops_adduser_credential}')}"), json=AddUser_json)
    if(AddUser_response.ok):
        logging.debug("Universal Controller Groups API (Modify Group) Exit Code {0}".format(AddUser_response))
        logging.debug("{0}".format(AddUser_response.text))
    else:
        logging.critical("Universal Controller Groups API (Modify Group) Exit Code {0}".format(AddUser_response))
        logging.critical("{0}".format(AddUser_response.text))
        quit(1)   
# --
# -- Delete User from Group
def DeleteUser(uac_user):
    logging.debug("Deleting User from Group")
    DeleteUser_json=ReadGroup_response.json()
    for user in DeleteUser_json['groupMembers']:
        if user['user']['value'] == uac_user:
            DeleteUser_json['groupMembers'].remove(user)
    DeleteUser_apiurl = "${ops_adduser_controllerurl}/resources/usergroup" 
    DeleteUser_apiHeaders = {
        'content-type': 'application/json',
        'Accept': 'application/json'
    }
    DeleteUser_response = requests.put(DeleteUser_apiurl, headers= DeleteUser_apiHeaders, auth=("${_credentialUser('${ops_adduser_credential}')}", "${_credentialPwd('${ops_adduser_credential}')}"), json=DeleteUser_json)
    if(DeleteUser_response.ok):
        logging.debug("Universal Controller Groups API (Modify Group) Exit Code {0}".format(DeleteUser_response))
        logging.debug("{0}".format(DeleteUser_response.text))
    else:
        logging.critical("Universal Controller Groups API (Modify Group) Exit Code {0}".format(DeleteUser_response))
        logging.critical("{0}".format(DeleteUser_response.text))
        quit(1)   
# --
def group_maintenance():

# script = open(r'''${_scriptPath('${ops_adduser_script}')}''','r') 
# script_data = script.read()

    with open(r'''${_scriptPath('${ops_adduser_script}')}''') as csv_file:
      csv_reader = csv.reader(csv_file, delimiter=",")
      line_count = 1  # ignore header row
      for row in csv_reader:
        if line_count &gt;1:
          user = ("{}".format(row[0])) # urllib.quote("'{}'".format(term))
          group = ("{}".format(row[1]))
          action = ("{}".format(row[2]))
          ReadGroup(group)          # -- Read the Existing Group so that we can Later add the User
          if action == "Add":                            
            AddUser(user)   # -- Add User to Group
            logging.info ("user: " + str(user) + " added to group: " + str(group))
          elif action == "Delete":
            DeleteUser(user)
            logging.info("user: " + str(user) + " removed from group: " + str(group))
          else:
            print ('######### hello ##########')
            logging.error ("Action must be Add or Delete the provided action " + str(action) + " does not exist")  
            quit(1)
        line_count += 1

# --&gt;

# -- Execute
main()
</script_windows><credentials_var_check>false</credentials_var_check><agent_cluster_var/><agent_cluster_var_check>false</agent_cluster_var_check><agent_var_check>false</agent_var_check><sys_created_by>ops.admin</sys_created_by><output_return_nline>100</output_return_nline><output_return_sline>1</output_return_sline><exit_code_text/><runtime_dir/><output_type>1</output_type><desktop_interact>false</desktop_interact><output_return_type>1</output_return_type><script_unix>#!/usr/bin/python
##!/opt/universal/python3.6/bin/python3
# --
#         Origins: Stonebranch
#          Author: Colin Cocksedge colin.cocksedge@stonebranch.com
#            Date: 27-AUG-2018
#
#    Copyright (c) Stonebranch, 2018.  All rights reserved.
#
#         Purpose: Add or Delete a UC User to or from a UC Group
#
#           Version History:    1.0     CCO     27-AUG-2018      Created Script 
#                               1.1     nbu     29-AUG-2018      correction ops_uccg_action changes to ops_adduser_action  
#                               2.0     nbu     07-Spt-2018      mass update added
# --
version = "2.0"

import logging
import requests
import sys
import csv
import time
import datetime

# -- logging settings DEBUG, INFO, WARNING, ERROR, CRITICAL

logging.basicConfig(level=logging.${ops_adduser_loglevel}, format=' %(asctime)s - %(levelname)s - %(message)s')

# -- Main Logic Function
def main():
    ScriptSetup()                                               # -- Import Required Modules, Setup Logging Format, Set Variables
    group_maintenance()
    
# --

# -- Import Required Modules, Setup Logging Format, Set Variables 
def ScriptSetup():
    logging.info("Executing version " + version + " with the following paramaters")   
    logging.info('Controller URL: ${ops_adduser_controllerurl}')
    logging.info('Script: ${ops_adduser_script}')
    logging.info("username: ${_credentialUser('${ops_adduser_credential}')}")
    logging.info("password: ${_credentialPwd('${ops_adduser_credential}')}")

# -- Functions Go Here

# -- Read Group Definition
def ReadGroup(group):
    logging.debug("Reading Group Definition")
    ReadGroup_apiurl = "${ops_adduser_controllerurl}/resources/usergroup?groupname=" + str(group)
    ReadGroup_apiHeaders = {
        'content-type': 'application/json',
        'Accept': 'application/json'
    }
    # -- Call RestAPI
    global ReadGroup_response
    logging.debug("Calling Universal Controller Groups API (READ Group)")
    ReadGroup_response = requests.get(ReadGroup_apiurl, headers=ReadGroup_apiHeaders, auth=("${_credentialUser('${ops_adduser_credential}')}", "${_credentialPwd('${ops_adduser_credential}')}")) 
    if(ReadGroup_response.ok):
        logging.debug("Universal Controller Groups API (READ Group) Exit Code {0}".format(ReadGroup_response))
        logging.debug("{0}".format(ReadGroup_response.text))
    else:
        logging.critical("Universal Controller Groups API (READ Group) Exit Code {0}".format(ReadGroup_response))
        logging.critical("{0}".format(ReadGroup_response.text))
        quit(1)
# --
# -- Add User to Group
def AddUser(user):
    logging.debug("Adding User to Group")
    AddUser_json=ReadGroup_response.json()
    AddUser_json['groupMembers'].append({'user':user})
    AddUser_apiurl = "${ops_adduser_controllerurl}/resources/usergroup" 
    AddUser_apiHeaders = {
        'content-type': 'application/json',
        'Accept': 'application/json'
    }
    AddUser_response = requests.put(AddUser_apiurl, headers=AddUser_apiHeaders, auth=("${_credentialUser('${ops_adduser_credential}')}", "${_credentialPwd('${ops_adduser_credential}')}"), json=AddUser_json)
    if(AddUser_response.ok):
        logging.debug("Universal Controller Groups API (Modify Group) Exit Code {0}".format(AddUser_response))
        logging.debug("{0}".format(AddUser_response.text))
    else:
        logging.critical("Universal Controller Groups API (Modify Group) Exit Code {0}".format(AddUser_response))
        logging.critical("{0}".format(AddUser_response.text))
        quit(1)   
# --
# -- Delete User from Group
def DeleteUser(uac_user):
    logging.debug("Deleting User from Group")
    DeleteUser_json=ReadGroup_response.json()
    for user in DeleteUser_json['groupMembers']:
        if user['user']['value'] == uac_user:
            DeleteUser_json['groupMembers'].remove(user)
    DeleteUser_apiurl = "${ops_adduser_controllerurl}/resources/usergroup" 
    DeleteUser_apiHeaders = {
        'content-type': 'application/json',
        'Accept': 'application/json'
    }
    DeleteUser_response = requests.put(DeleteUser_apiurl, headers= DeleteUser_apiHeaders, auth=("${_credentialUser('${ops_adduser_credential}')}", "${_credentialPwd('${ops_adduser_credential}')}"), json=DeleteUser_json)
    if(DeleteUser_response.ok):
        logging.debug("Universal Controller Groups API (Modify Group) Exit Code {0}".format(DeleteUser_response))
        logging.debug("{0}".format(DeleteUser_response.text))
    else:
        logging.critical("Universal Controller Groups API (Modify Group) Exit Code {0}".format(DeleteUser_response))
        logging.critical("{0}".format(DeleteUser_response.text))
        quit(1)   
# --
def group_maintenance():

# script = open(r'''${_scriptPath('${ops_adduser_script}')}''','r') 
# script_data = script.read()

    with open(r'''${_scriptPath('${ops_adduser_script}')}''') as csv_file:
      csv_reader = csv.reader(csv_file, delimiter=",")
      line_count = 1  # ignore header row
      for row in csv_reader:
        if line_count &gt;1:
          user = ("{}".format(row[0])) # urllib.quote("'{}'".format(term))
          group = ("{}".format(row[1]))
          action = ("{}".format(row[2]))
          ReadGroup(group)          # -- Read the Existing Group so that we can Later add the User
          if action == "Add":                            
            AddUser(user)   # -- Add User to Group
            logging.info ("user: " + str(user) + " added to group: " + str(group))
          elif action == "Delete":
            DeleteUser(user)
            logging.info("user: " + str(user) + " removed from group: " + str(group))
          else:
            print ('######### hello ##########')
            logging.error ("Action must be Add or Delete the provided action " + str(action) + " does not exist")  
            quit(1)
        line_count += 1

# --&gt;

# -- Execute
main()
</script_unix><output_return_file/><run_as_sudo>false</run_as_sudo><script/><agent_type>1</agent_type><script_type_windows>.py</script_type_windows><environment/><agent_cluster/><elevate_user>false</elevate_user><exit_code_output/><name>add_user_csv</name><exit_codes>0</exit_codes><exit_code_processing>1</exit_code_processing><create_console>false</create_console><related_items_node><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2018-09-07 04:47:08</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>28efc6823e3344c898a77840a367d38b</sys_id><require_if_field_value/><sys_updated_by>ops.admin</sys_updated_by><sys_created_on>2018-09-07 04:47:08</sys_created_on><field_value/><sys_created_by>ops.admin</sys_created_by><int_field_min/><universal_template_id>771f4b096eba43ce8f302662cf9a8f5c</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>credential</label><int_field_max/><sequence>1</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint/><field_mapping>credentialField1</field_mapping><name>credential</name><field_regex/><field_type>5</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2018-09-07 12:51:17</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>91faf4b4987f4e0ebd59634c0f2d02f4</sys_id><require_if_field_value/><sys_updated_by>ops.admin</sys_updated_by><sys_created_on>2018-09-07 04:49:39</sys_created_on><field_value/><sys_created_by>ops.admin</sys_created_by><int_field_min/><universal_template_id>771f4b096eba43ce8f302662cf9a8f5c</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>script</label><int_field_max/><sequence>3</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint>script format: group,user,[Add|Delete] e.g. testgroup,testuser1,Add</hint><field_mapping>scriptField1</field_mapping><name>script</name><field_regex/><field_type>6</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2018-09-07 04:46:36</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>cde3ed0df917415f8620e6b8a62bfbec</sys_id><require_if_field_value/><sys_updated_by>ops.admin</sys_updated_by><sys_created_on>2018-09-07 04:46:36</sys_created_on><field_value/><sys_created_by>ops.admin</sys_created_by><int_field_min/><universal_template_id>771f4b096eba43ce8f302662cf9a8f5c</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>controllerurl</label><int_field_max/><sequence>0</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint/><field_mapping>textField1</field_mapping><name>controllerurl</name><field_regex/><field_type>1</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2018-09-07 04:48:21</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>e2e2698be96d422595a6048af3c95f80</sys_id><require_if_field_value/><sys_updated_by>ops.admin</sys_updated_by><sys_created_on>2018-09-07 04:48:21</sys_created_on><field_value>INFO</field_value><sys_created_by>ops.admin</sys_created_by><int_field_min/><universal_template_id>771f4b096eba43ce8f302662cf9a8f5c</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>loglevel</label><int_field_max/><sequence>2</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint>INFO,DEBUG,WARNING,CRITICAL,ERROR</hint><field_mapping>choiceField1</field_mapping><name>loglevel</name><field_regex/><field_type>4</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field_choice action="INSERT_OR_UPDATE"><field_id>e2e2698be96d422595a6048af3c95f80</field_id><use_field_value_for_label>true</use_field_value_for_label><sys_id>1e18c73638fa4c74a6565c201bcfc30f</sys_id><sequence>0</sequence><sys_updated_by>ops.admin</sys_updated_by><sys_created_on>2018-09-07 04:48:30</sys_created_on><field_value_label>INFO</field_value_label><field_value>INFO</field_value><sys_updated_on>2018-09-07 04:48:30</sys_updated_on><sys_created_by>ops.admin</sys_created_by><universal_template_id>771f4b096eba43ce8f302662cf9a8f5c</universal_template_id></ops_unv_tmplt_field_choice><ops_unv_tmplt_field_choice action="INSERT_OR_UPDATE"><field_id>e2e2698be96d422595a6048af3c95f80</field_id><use_field_value_for_label>true</use_field_value_for_label><sys_id>32a141946230417686524a24dd619bdd</sys_id><sequence>2</sequence><sys_updated_by>ops.admin</sys_updated_by><sys_created_on>2018-09-07 04:48:48</sys_created_on><field_value_label>WARNING</field_value_label><field_value>WARNING</field_value><sys_updated_on>2018-09-07 04:48:48</sys_updated_on><sys_created_by>ops.admin</sys_created_by><universal_template_id>771f4b096eba43ce8f302662cf9a8f5c</universal_template_id></ops_unv_tmplt_field_choice><ops_unv_tmplt_field_choice action="INSERT_OR_UPDATE"><field_id>e2e2698be96d422595a6048af3c95f80</field_id><use_field_value_for_label>true</use_field_value_for_label><sys_id>701cc43a0dff42df8b6287983dc328d4</sys_id><sequence>1</sequence><sys_updated_by>ops.admin</sys_updated_by><sys_created_on>2018-09-07 04:48:39</sys_created_on><field_value_label>DEBUG</field_value_label><field_value>DEBUG</field_value><sys_updated_on>2018-09-07 04:48:39</sys_updated_on><sys_created_by>ops.admin</sys_created_by><universal_template_id>771f4b096eba43ce8f302662cf9a8f5c</universal_template_id></ops_unv_tmplt_field_choice><ops_unv_tmplt_field_choice action="INSERT_OR_UPDATE"><field_id>e2e2698be96d422595a6048af3c95f80</field_id><use_field_value_for_label>true</use_field_value_for_label><sys_id>721c65cfbfb54165aabeda57b28a6242</sys_id><sequence>3</sequence><sys_updated_by>ops.admin</sys_updated_by><sys_created_on>2018-09-07 04:49:00</sys_created_on><field_value_label>CRITICAL</field_value_label><field_value>CRITICAL</field_value><sys_updated_on>2018-09-07 04:49:00</sys_updated_on><sys_created_by>ops.admin</sys_created_by><universal_template_id>771f4b096eba43ce8f302662cf9a8f5c</universal_template_id></ops_unv_tmplt_field_choice><ops_unv_tmplt_field_choice action="INSERT_OR_UPDATE"><field_id>e2e2698be96d422595a6048af3c95f80</field_id><use_field_value_for_label>true</use_field_value_for_label><sys_id>976f74e9aff74c508fd5df16723fb3b6</sys_id><sequence>4</sequence><sys_updated_by>ops.admin</sys_updated_by><sys_created_on>2018-09-07 04:49:15</sys_created_on><field_value_label>ERROR</field_value_label><field_value>ERROR</field_value><sys_updated_on>2018-09-07 04:49:15</sys_updated_on><sys_created_by>ops.admin</sys_created_by><universal_template_id>771f4b096eba43ce8f302662cf9a8f5c</universal_template_id></ops_unv_tmplt_field_choice></related_items_node></ops_unv_tmplt></unload>